// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { KvGetKvDataData, KvGetKvDataResponse, KvGetKvRecordData, KvGetKvRecordResponse, KvUpdateKvData, KvUpdateKvResponse, KvDeleteKvData, KvDeleteKvResponse, KvGetBucketListResponse, KvCreateBucketData, KvCreateBucketResponse, KvCreateBucket1Data, KvCreateBucket1Response, KvDeleteBucketData, KvDeleteBucketResponse, KvUploadFileData, KvUploadFileResponse, KvDownloadFileData, KvDownloadFileResponse, IndexHomeResponse } from './types.gen';

/**
 * Get Kv Data
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvGetKvData = (data: KvGetKvDataData): CancelablePromise<KvGetKvDataResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/kv/get_kv_data',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Kv Record
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvGetKvRecord = (data: KvGetKvRecordData): CancelablePromise<KvGetKvRecordResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/kv/get_kv_record',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Kv
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvUpdateKv = (data: KvUpdateKvData): CancelablePromise<KvUpdateKvResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/update_kv',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Kv
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvDeleteKv = (data: KvDeleteKvData): CancelablePromise<KvDeleteKvResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/delete_kv',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Bucket List
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvGetBucketList = (): CancelablePromise<KvGetBucketListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/kv/get_bucket_list'
}); };

/**
 * Create Bucket
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvCreateBucket = (data: KvCreateBucketData): CancelablePromise<KvCreateBucketResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/create_bucket',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Bucket
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvCreateBucket1 = (data: KvCreateBucket1Data): CancelablePromise<KvCreateBucket1Response> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/rename_bucket',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Bucket
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ResponseBase Successful Response
 * @throws ApiError
 */
export const kvDeleteBucket = (data: KvDeleteBucketData): CancelablePromise<KvDeleteBucketResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/delete_bucket',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Upload File
 * @param data The data for the request.
 * @param data.formData
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const kvUploadFile = (data: KvUploadFileData): CancelablePromise<KvUploadFileResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/kv/upload-file',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Download File
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const kvDownloadFile = (data: KvDownloadFileData): CancelablePromise<KvDownloadFileResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/kv/download-file',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Home
 * @returns string Successful Response
 * @throws ApiError
 */
export const indexHome = (): CancelablePromise<IndexHomeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/'
}); };